# Generated by Django 5.1.7 on 2025-06-21 11:28

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='2-letter language code (e.g., en, sw)', max_length=2, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(db_index=True, max_length=15)),
                ('code', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('national_id', models.CharField(max_length=20, unique=True)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Custom User',
                'verbose_name_plural': 'Custom Users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=50)),
                ('table_name', models.CharField(max_length=50)),
                ('record_id', models.BigIntegerField()),
                ('old_values', models.JSONField(blank=True, null=True)),
                ('new_values', models.JSONField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EnumerationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='draft', max_length=10)),
                ('verification_notes', models.TextField(blank=True, null=True)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enumerations', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_enumerations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Enumeration Data',
            },
        ),
        migrations.CreateModel(
            name='EmploymentInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employment_status', models.CharField(choices=[('employed', 'Employed'), ('self-employed', 'Self-Employed'), ('unemployed', 'Unemployed'), ('student', 'Student'), ('retired', 'Retired')], max_length=15)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('employer_name', models.CharField(blank=True, max_length=100, null=True)),
                ('income_range', models.CharField(choices=[('none', 'No Income'), ('low', 'Low Income'), ('medium', 'Medium Income'), ('high', 'High Income')], max_length=10)),
                ('enumeration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employment_info', to='census.enumerationdata')),
            ],
            options={
                'verbose_name_plural': 'Employment Information',
            },
        ),
        migrations.CreateModel(
            name='EducationInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('highest_education_level', models.CharField(choices=[('none', 'No Formal Education'), ('primary', 'Primary Education'), ('secondary', 'Secondary Education'), ('certificate', 'Certificate'), ('diploma', 'Diploma'), ('bachelors', "Bachelor's Degree"), ('masters', "Master's Degree"), ('phd', 'PhD')], max_length=15)),
                ('institution_name', models.CharField(blank=True, max_length=100, null=True)),
                ('completion_year', models.SmallIntegerField(blank=True, null=True)),
                ('literacy_status', models.CharField(choices=[('literate', 'Literate'), ('illiterate', 'Illiterate')], max_length=10)),
                ('enumeration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='education_info', to='census.enumerationdata')),
            ],
            options={
                'verbose_name_plural': 'Education Information',
            },
        ),
        migrations.CreateModel(
            name='AddressInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=50)),
                ('district', models.CharField(max_length=50)),
                ('county', models.CharField(max_length=50)),
                ('sub_county', models.CharField(max_length=50)),
                ('parish', models.CharField(max_length=50)),
                ('village', models.CharField(max_length=50)),
                ('street', models.CharField(blank=True, max_length=100, null=True)),
                ('house_number', models.CharField(blank=True, max_length=20, null=True)),
                ('location_description', models.TextField(blank=True, help_text="User's description of their location", null=True)),
                ('residence_type', models.CharField(choices=[('permanent', 'Permanent'), ('temporary', 'Temporary')], max_length=10)),
                ('enumeration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='address_info', to='census.enumerationdata')),
            ],
            options={
                'verbose_name_plural': 'Address Information',
            },
        ),
        migrations.CreateModel(
            name='PersonalInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(max_length=50)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('marital_status', models.CharField(choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=10)),
                ('nationality', models.CharField(max_length=50)),
                ('enumeration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personal_info', to='census.enumerationdata')),
            ],
            options={
                'verbose_name_plural': 'Personal Information',
            },
        ),
        migrations.CreateModel(
            name='SystemSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Setting key/name', max_length=50, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Whether this setting can be exposed via API')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['national_id'], name='census_cust_nationa_b517b8_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['phone_number'], name='census_cust_phone_n_ce6481_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user'], name='census_audi_user_id_d660e2_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action'], name='census_audi_action_090c65_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['table_name', 'record_id'], name='census_audi_table_n_f00166_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['created_at'], name='census_audi_created_d69334_idx'),
        ),
        migrations.AddIndex(
            model_name='enumerationdata',
            index=models.Index(fields=['user'], name='census_enum_user_id_e5ab56_idx'),
        ),
        migrations.AddIndex(
            model_name='enumerationdata',
            index=models.Index(fields=['status'], name='census_enum_status_6b6438_idx'),
        ),
        migrations.AddIndex(
            model_name='addressinformation',
            index=models.Index(fields=['district'], name='census_addr_distric_9fe95f_idx'),
        ),
        migrations.AddIndex(
            model_name='systemsetting',
            index=models.Index(fields=['key'], name='census_syst_key_dd58da_idx'),
        ),
    ]
